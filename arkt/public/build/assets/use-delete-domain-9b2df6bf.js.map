{"version":3,"file":"use-delete-domain-9b2df6bf.js","sources":["../../../node_modules/@tanstack/query-core/build/modern/infiniteQueryObserver.js","../../../node_modules/@tanstack/react-query/build/modern/useInfiniteQuery.js","../../../common/resources/client/http/backend-response/pagination-response.ts","../../../common/resources/client/ui/infinite-scroll/use-infinite-data.ts","../../../common/resources/client/icons/material/MoreVert.tsx","../../../resources/client/templates/website-builder.svg","../../../resources/client/templates/use-templates.ts","../../../resources/client/templates/use-template.ts","../../../resources/client/projects/use-create-project.ts","../../../common/resources/client/custom-domains/datatable/world.svg","../../../common/resources/client/custom-domains/datatable/requests/use-delete-domain.ts"],"sourcesContent":["// src/infiniteQueryObserver.ts\nimport { QueryObserver } from \"./queryObserver.js\";\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior\n} from \"./infiniteQueryBehavior.js\";\nvar InfiniteQueryObserver = class extends QueryObserver {\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n  setOptions(options, notifyOptions) {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior()\n      },\n      notifyOptions\n    );\n  }\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n  fetchNextPage(options) {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: \"forward\" }\n      }\n    });\n  }\n  fetchPreviousPage(options) {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: \"backward\" }\n      }\n    });\n  }\n  createResult(query, options) {\n    const { state } = query;\n    const result = super.createResult(query, options);\n    const { isFetching, isRefetching } = result;\n    const isFetchingNextPage = isFetching && state.fetchMeta?.fetchMore?.direction === \"forward\";\n    const isFetchingPreviousPage = isFetching && state.fetchMeta?.fetchMore?.direction === \"backward\";\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n    };\n  }\n};\nexport {\n  InfiniteQueryObserver\n};\n//# sourceMappingURL=infiniteQueryObserver.js.map","\"use client\";\n\n// src/useInfiniteQuery.ts\nimport { InfiniteQueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nfunction useInfiniteQuery(options, queryClient) {\n  return useBaseQuery(\n    options,\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    InfiniteQueryObserver,\n    queryClient\n  );\n}\nexport {\n  useInfiniteQuery\n};\n//# sourceMappingURL=useInfiniteQuery.js.map","import {BackendResponse} from './backend-response';\n\nexport interface LengthAwarePaginationResponse<T = unknown> {\n  data: T[];\n  from: number;\n  to: number;\n  total: number;\n  per_page: number;\n  current_page: number;\n  last_page: number;\n  next_page?: number;\n  prev_page?: number;\n}\n\nexport interface SimplePaginationResponse<T = unknown> {\n  data: T[];\n  from: number;\n  to: number;\n  per_page: number;\n  current_page: number;\n  next_page?: number | null;\n  prev_page?: number | null;\n}\n\ninterface CursorPaginationResponse<T> {\n  data: T[];\n  next_cursor: string | null;\n  per_page: number;\n  prev_cursor: string | null;\n}\n\nexport type PaginationResponse<T> =\n  | LengthAwarePaginationResponse<T>\n  | SimplePaginationResponse<T>\n  | CursorPaginationResponse<T>;\n\nexport const EMPTY_PAGINATION_RESPONSE = {\n  pagination: {data: [], from: 0, to: 0, per_page: 15, current_page: 1},\n};\n\nexport interface PaginatedBackendResponse<T> extends BackendResponse {\n  pagination: PaginationResponse<T>;\n}\n\nexport function hasPreviousPage(\n  pagination: PaginationResponse<unknown>,\n): boolean {\n  if ('prev_cursor' in pagination) {\n    return pagination.prev_cursor != null;\n  }\n\n  if ('prev_page' in pagination) {\n    return pagination.prev_page != null;\n  }\n\n  return pagination.current_page > 1;\n}\n\nexport function hasNextPage(pagination: PaginationResponse<unknown>): boolean {\n  if ('next_cursor' in pagination) {\n    return pagination.next_cursor != null;\n  }\n\n  if ('last_page' in pagination) {\n    return pagination.current_page < pagination.last_page;\n  }\n\n  if ('next_page' in pagination) {\n    return pagination.next_page != null;\n  }\n\n  return (\n    pagination.data.length > 0 && pagination.data.length >= pagination.per_page\n  );\n}\n","import {\n  hashKey,\n  InfiniteData,\n  keepPreviousData,\n  useInfiniteQuery,\n  UseInfiniteQueryResult,\n} from '@tanstack/react-query';\nimport {apiClient} from '@common/http/query-client';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {\n  hasNextPage,\n  PaginationResponse,\n} from '@common/http/backend-response/pagination-response';\nimport {useMemo, useRef, useState} from 'react';\nimport {SortDescriptor} from '@common/ui/tables/types/sort-descriptor';\nimport {GetDatatableDataParams} from '@common/datatable/requests/paginated-resources';\nimport {QueryKey} from '@tanstack/query-core/src/types';\n\nexport type UseInfiniteDataResult<\n  T,\n  E extends object = object,\n> = UseInfiniteQueryResult<InfiniteData<PaginationResponse<T> & E>> & {\n  items: T[];\n  totalItems: number | null;\n  // initial load is done and no results were returned from backend\n  noResults: boolean;\n  // true when changing filters or sorting, not on initial load, background fetch or infinite load\n  isReloading: boolean;\n  sortDescriptor: SortDescriptor;\n  setSortDescriptor: (sortDescriptor: SortDescriptor) => void;\n  searchQuery: string;\n  setSearchQuery: (searchQuery: string) => void;\n};\n\nfunction buildQueryKey(\n  {\n    queryKey,\n    defaultOrderDir,\n    defaultOrderBy,\n    queryParams,\n  }: UseInfiniteDataProps<any>,\n  sortDescriptor: SortDescriptor,\n  searchQuery: string = '',\n) {\n  // make sure to always set default order dir and col so query keys are consistent\n  if (!sortDescriptor.orderBy) {\n    sortDescriptor.orderBy = defaultOrderBy;\n  }\n  if (!sortDescriptor.orderDir) {\n    sortDescriptor.orderDir = defaultOrderDir;\n  }\n  return [...queryKey, sortDescriptor, searchQuery, queryParams];\n}\n\ninterface Response<T> extends BackendResponse {\n  pagination: PaginationResponse<T>;\n}\n\nexport interface UseInfiniteDataProps<T> {\n  initialPage?: PaginationResponse<T> | null;\n  queryKey: QueryKey;\n  queryParams?: Record<string, string | number | null>;\n  endpoint: string;\n  defaultOrderBy?: SortDescriptor['orderBy'];\n  defaultOrderDir?: SortDescriptor['orderDir'];\n  // whether user can sort items manually (table header, dropdown, etc)\n  willSortOrFilter?: boolean;\n  // ordering is not available with cursor pagination\n  paginate?: 'simple' | 'lengthAware' | 'cursor';\n  transformResponse?: (response: Response<T>) => Response<T>;\n}\nexport function useInfiniteData<T, E extends object = {}>(\n  props: UseInfiniteDataProps<T>,\n): UseInfiniteDataResult<T, E> {\n  const {\n    initialPage,\n    endpoint,\n    defaultOrderBy,\n    defaultOrderDir,\n    queryParams,\n    paginate,\n    transformResponse,\n    willSortOrFilter = false,\n  } = props;\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({\n    orderBy: defaultOrderBy,\n    orderDir: defaultOrderDir,\n  });\n\n  const queryKey = buildQueryKey(props, sortDescriptor, searchQuery);\n  const initialQueryKey = useRef(hashKey(queryKey)).current;\n\n  const query = useInfiniteQuery({\n    placeholderData: willSortOrFilter ? keepPreviousData : undefined,\n    queryKey,\n    queryFn: ({pageParam, signal}) => {\n      const params: GetDatatableDataParams = {\n        ...queryParams,\n        perPage: initialPage?.per_page || queryParams?.perPage,\n        query: (queryParams?.query as string) ?? searchQuery,\n        paginate,\n        ...sortDescriptor,\n      };\n      if (paginate === 'cursor') {\n        params.cursor = pageParam;\n      } else {\n        params.page = pageParam || 1;\n      }\n      return fetchData<T>(endpoint, params, transformResponse, signal);\n    },\n    initialPageParam: paginate === 'cursor' ? '' : 1,\n    getNextPageParam: lastResponse => {\n      if (!hasNextPage(lastResponse.pagination)) {\n        return null;\n      }\n      if ('next_cursor' in lastResponse.pagination) {\n        return lastResponse.pagination.next_cursor;\n      }\n      return lastResponse.pagination.current_page + 1;\n    },\n    initialData: () => {\n      // initial data will be for initial query key only, remove\n      // initial data if query key changes, so query is reset\n      if (!initialPage || hashKey(queryKey) !== initialQueryKey) {\n        return undefined;\n      }\n\n      return {\n        pageParams: [undefined, 1],\n        pages: [{pagination: initialPage}],\n      };\n    },\n  });\n\n  const items = useMemo(() => {\n    return query.data?.pages.flatMap(p => p.pagination.data) || [];\n  }, [query.data?.pages]);\n\n  const firstPage = query.data?.pages[0].pagination;\n  const totalItems =\n    firstPage && 'total' in firstPage && firstPage.total\n      ? firstPage.total\n      : null;\n\n  return {\n    ...query,\n    items,\n    totalItems,\n    noResults: query.data?.pages?.[0].pagination.data.length === 0,\n    // can't use \"isRefetching\", it's true for some reason when changing sorting or filters\n    isReloading:\n      query.isFetching && !query.isFetchingNextPage && query.isPlaceholderData,\n    sortDescriptor,\n    setSortDescriptor,\n    searchQuery,\n    setSearchQuery,\n  } as UseInfiniteDataResult<T, E>;\n}\n\nasync function fetchData<T>(\n  endpoint: string,\n  params: GetDatatableDataParams,\n  transformResponse?: UseInfiniteDataProps<T>['transformResponse'],\n  signal?: AbortSignal,\n): Promise<Response<T>> {\n  if (params.query) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n  }\n  return apiClient\n    .get(endpoint, {params, signal: params.query ? signal : undefined})\n    .then(r => {\n      if (transformResponse) {\n        return transformResponse(r.data);\n      }\n      return r.data;\n    });\n}\n","import {createSvgIcon} from '../create-svg-icon';\n\nexport const MoreVertIcon = createSvgIcon(\n  <path d=\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\" />\n, 'MoreVertOutlined');\n","export default \"__VITE_ASSET__b0e9a41c__\"","import {useInfiniteData} from '@common/ui/infinite-scroll/use-infinite-data';\nimport {BuilderTemplate} from '@app/templates/builder-template';\n\nexport interface GetTemplatesParams {\n  perPage?: string | number;\n  page?: string | number;\n  query?: string;\n  orderBy?: string;\n  orderDir?: string;\n  category?: string;\n}\n\nexport function useTemplates(params: GetTemplatesParams) {\n  return useInfiniteData<BuilderTemplate>({\n    queryKey: ['templates', params],\n    endpoint: 'templates',\n    paginate: 'simple',\n    willSortOrFilter: true,\n    queryParams: params as any,\n  });\n}\n","import {apiClient} from '@common/http/query-client';\nimport {useQuery} from '@tanstack/react-query';\nimport {BuilderTemplate} from '@app/templates/builder-template';\n\nexport interface GetTemplateResponse {\n  template: BuilderTemplate;\n}\n\nexport function useTemplate(templateName: string, loadPages = false) {\n  return useQuery({\n    queryKey: ['templates', `${templateName}`, loadPages],\n    queryFn: () => fetchTemplate(templateName),\n  });\n}\n\nexport function fetchTemplate(templateName: string, loadPages = false) {\n  return apiClient\n    .get<GetTemplateResponse>(`templates/${templateName}`, {\n      params: {loadPages},\n    })\n    .then(response => response.data);\n}\n","import {useMutation, useQueryClient} from '@tanstack/react-query';\nimport {UseFormReturn} from 'react-hook-form';\nimport {apiClient, queryClient} from '@common/http/query-client';\nimport {toast} from '@common/ui/toast/toast';\nimport {useTrans} from '@common/i18n/use-trans';\nimport {onFormQueryError} from '@common/errors/on-form-query-error';\nimport {message} from '@common/i18n/message';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {EditorProject} from '@app/dashboard/project';\nimport {getProductionHtml} from '@app/editor/utils/parse-html-into-document';\nimport {BLANK_PAGE_SKELETON} from '@app/projects/blank-page-skeleton';\nimport {BuilderTemplate} from '@app/templates/builder-template';\nimport {fetchTemplate} from '@app/templates/use-template';\nimport {reloadAccountUsage} from '@app/editor/use-account-usage';\n\ninterface Response extends BackendResponse {\n  project: EditorProject;\n}\n\nexport interface CreateProjectPayload {\n  name: string;\n  templateName?: string;\n  userId?: string | number;\n  published?: boolean;\n}\n\nexport function useCreateProject(form: UseFormReturn<CreateProjectPayload>) {\n  const {trans} = useTrans();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (payload: CreateProjectPayload) => createProject(payload),\n    onSuccess: async () => {\n      reloadAccountUsage();\n      await queryClient.invalidateQueries({queryKey: ['projects']});\n      toast(trans(message('Site created')));\n    },\n    onError: err => onFormQueryError(err, form),\n  });\n}\n\nasync function createProject({\n  name,\n  templateName,\n  userId,\n  published,\n}: CreateProjectPayload) {\n  const payload: {\n    name: string;\n    pages?: {html: string}[];\n    templateName?: string;\n    userId?: string | number;\n    published?: boolean;\n  } = {\n    name,\n    templateName,\n    pages: [],\n    userId,\n    published,\n  };\n  if (templateName) {\n    try {\n      const response = await queryClient.fetchQuery({\n        queryKey: ['templates', templateName, true],\n        queryFn: () => fetchTemplate(templateName, true),\n      });\n      payload.pages = payloadForTemplate(response.template);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  } else {\n    payload.pages = pagesForBlankProject();\n  }\n  return apiClient.post<Response>('projects', payload).then(r => r.data);\n}\n\nfunction pagesForBlankProject() {\n  return [\n    {\n      name: 'index',\n      html: getProductionHtml(BLANK_PAGE_SKELETON),\n    },\n  ];\n}\n\nfunction payloadForTemplate(template: BuilderTemplate) {\n  return template.pages.map(page => ({\n    name: page.name,\n    html: getProductionHtml(page.html, template),\n  }));\n}\n","export default \"__VITE_ASSET__9a950bec__\"","import {useMutation} from '@tanstack/react-query';\nimport {apiClient, queryClient} from '@common/http/query-client';\nimport {useTrans} from '@common/i18n/use-trans';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {showHttpErrorToast} from '@common/utils/http/show-http-error-toast';\nimport {message} from '@common/i18n/message';\nimport {toast} from '@common/ui/toast/toast';\nimport {DatatableDataQueryKey} from '@common/datatable/requests/paginated-resources';\nimport {CustomDomain} from '@common/custom-domains/custom-domain';\nimport {removeProtocol} from '@common/utils/urls/remove-protocol';\n\ninterface Response extends BackendResponse {}\n\ninterface Payload {\n  domain: CustomDomain;\n}\n\nexport function useDeleteDomain() {\n  const {trans} = useTrans();\n  return useMutation({\n    mutationFn: (props: Payload) => deleteDomain(props),\n    onSuccess: (response, props) => {\n      toast.positive(\n        trans(\n          message('“:domain” removed', {\n            values: {domain: removeProtocol(props.domain.host)},\n          }),\n        ),\n      );\n      queryClient.invalidateQueries({\n        queryKey: DatatableDataQueryKey('custom-domain'),\n      });\n    },\n    onError: err => showHttpErrorToast(err),\n  });\n}\n\nfunction deleteDomain({domain}: Payload): Promise<Response> {\n  return apiClient.delete(`custom-domain/${domain.id}`).then(r => r.data);\n}\n"],"names":["InfiniteQueryObserver","QueryObserver","client","options","notifyOptions","infiniteQueryBehavior","query","state","result","isFetching","isRefetching","isFetchingNextPage","_b","_a","isFetchingPreviousPage","_d","_c","hasNextPage","hasPreviousPage","useInfiniteQuery","queryClient","useBaseQuery","pagination","buildQueryKey","queryKey","defaultOrderDir","defaultOrderBy","queryParams","sortDescriptor","searchQuery","useInfiniteData","props","initialPage","endpoint","paginate","transformResponse","willSortOrFilter","setSearchQuery","useState","setSortDescriptor","initialQueryKey","useRef","hashKey","keepPreviousData","pageParam","signal","params","fetchData","lastResponse","items","useMemo","p","firstPage","totalItems","resolve","apiClient","r","MoreVertIcon","createSvgIcon","jsx","builderImage","useTemplates","useTemplate","templateName","loadPages","useQuery","fetchTemplate","response","useCreateProject","form","trans","useTrans","useQueryClient","useMutation","payload","createProject","reloadAccountUsage","toast","message","err","onFormQueryError","name","userId","published","payloadForTemplate","pagesForBlankProject","getProductionHtml","BLANK_PAGE_SKELETON","template","page","world","useDeleteDomain","deleteDomain","removeProtocol","DatatableDataQueryKey","showHttpErrorToast","domain"],"mappings":"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","x_google_ignoreList":[0,1]}